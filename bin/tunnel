#! /usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'
require 'logger'

class TunnelSupervisor
  attr_reader :configuration, :pids, :log

  MONITOR_SLEEP = 1

  def initialize(configuration, log: Logger.new(STDOUT))
    @configuration = configuration
    @pids = {}
    @log = Logger.new(STDOUT, level: ENV['LOG_LEVEL'] || 'DEBUG')
  end

  def start!
    configuration.each { |key, conf| start_one(key, conf) }
  end

  def monitor!
    loop do
      pids.each do |key, pid|
        begin
          log.info("Checking #{key}[PID:#{pid}]")
          Process.getpgid(pid)
          log.info("#{key}[PID]:#{pid} is alive.")
        rescue Errno::ESRCH
          log.warn("#{key}[PID:#{pid}] has crashed. Restarting.")
          start_one(key, configuration[key])
        end
      end

      sleep MONITOR_SLEEP
    end
  end

  private

  def start_one(key, conf)
    log.info("Starting #{key} tunnel.")

    pids[key] = Process.fork do
      `lt --port #{conf['port']} --subdomain "#{conf['domain']}"`
    end

    log.info("Done. PID: #{pids[key]}")
  end
end

config = YAML.load_file(
  File.join(
    File.expand_path('..', __dir__),
    'config.yml'
  )
)

supervisor = TunnelSupervisor.new(config)

supervisor.start!
supervisor.monitor!
